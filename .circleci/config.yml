# vim:ts=2:sw=2:et
version: 2

# TODO:
# - change standard Ubuntu from 18.10 to 19.04 (disco dingo)
# - add? build_ubuntu1404
# - provide jsoncpp via docker image => opt-out building in cmake

# -----------------------------------------------------------------------------------------------
defaults:

  - workflow_trigger_on_tags: &workflow_trigger_on_tags
      filters:
        tags:
          only: /.*/

  - workflow_ubuntu1810: &workflow_ubuntu1810
      <<: *workflow_trigger_on_tags
      requires:
        - build_ubuntu1810

  - workflow_osx: &workflow_osx
      <<: *workflow_trigger_on_tags
      requires:
        - build_osx

  - workflow_ubuntu1810_asan: &workflow_ubuntu1810_asan
      <<: *workflow_trigger_on_tags
      requires:
        - build_ubuntu1810_asan

  - workflow_emscripten: &workflow_emscripten
      <<: *workflow_trigger_on_tags
      requires:
        - build_emscripten

  - setup_prerelease_commit_hash: &setup_prerelease_commit_hash
      name: Store commit hash and prerelease
      command: |
        if [ "$CIRCLE_BRANCH" = release -o -n "$CIRCLE_TAG" ]; then echo -n > prerelease.txt; else date -u +"nightly.%Y.%-m.%-d" > prerelease.txt; fi
        echo -n "$CIRCLE_SHA1" > commit_hash.txt

  - run_build: &run_build
      name: Build
      command: |
        set -ex
        if [ "$CIRCLE_BRANCH" = release -o -n "$CIRCLE_TAG" ]; then echo -n > prerelease.txt; else date -u +"nightly.%Y.%-m.%-d" > prerelease.txt; fi
        echo -n "$CIRCLE_SHA1" > commit_hash.txt
        mkdir -p build
        cd build
        [ -n "$COVERAGE" -a "$CIRCLE_BRANCH" != release -a -z "$CIRCLE_TAG" ] && CMAKE_OPTIONS="$CMAKE_OPTIONS -DCOVERAGE=ON"
        cmake .. $CMAKE_OPTIONS -G "Unix Makefiles"
        make -j4

  - run_build_ossfuzz: &run_build_ossfuzz
      name: Build_ossfuzz
      command: |
        mkdir -p build
        cd build
        /src/LPM/external.protobuf/bin/protoc --proto_path=../test/tools/ossfuzz yulProto.proto --cpp_out=../test/tools/ossfuzz
        cmake .. -DCMAKE_BUILD_TYPE=Release $CMAKE_OPTIONS
        make ossfuzz ossfuzz_proto -j4

  - all_artifacts: &all_artifacts
      root: build
      paths:
        - solc/solc
        - test/soltest
        - test/tools/solfuzzer

  - solc_artifact: &solc_artifact
      path: build/solc/solc
      destination: solc

  - ossfuzz_artifacts: &ossfuzz_artifacts
      root: build
      paths:
        - test/tools/ossfuzz/const_opt_ossfuzz
        - test/tools/ossfuzz/solc_noopt_ossfuzz
        - test/tools/ossfuzz/solc_opt_ossfuzz
        - test/tools/ossfuzz/strictasm_assembly_ossfuzz
        - test/tools/ossfuzz/strictasm_diff_ossfuzz
        - test/tools/ossfuzz/strictasm_opt_ossfuzz
        - test/tools/ossfuzz/yul_proto_diff_ossfuzz
        - test/tools/ossfuzz/yul_proto_ossfuzz

  - run_soltest: &run_soltest
      name: soltest
      command: ./.circleci/soltest.sh

  - run_cmdline_tests: &run_cmdline_tests
      name: command line tests
      command: ./test/cmdlineTests.sh

  - test_steps: &test_steps
      - checkout
      - attach_workspace:
          at: build
      - run: *run_soltest
      - store_test_results:
          path: test_results/
      - store_artifacts:
          path: test_results/
          destination: test_results/

  - test_ubuntu1810: &test_ubuntu1810
      docker:
        - image: trapni/solc-buildpack-deps:ubuntu1810
      steps: *test_steps

  - test_asan: &test_asan
      <<: *test_ubuntu1810

# -----------------------------------------------------------------------------------------------
jobs:

  check_spelling:
    docker:
      - image: circleci/python:3.6
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Install dependencies
          command: |
            pip install --user codespell
      - run:
          name: Check spelling
          command: ~/.local/bin/codespell -S "*.enc,.git" -I ./scripts/codespell_whitelist.txt

  check_coding_style:
    docker:
      - image: buildpack-deps:bionic
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./scripts/check_style.sh

  check_buglist:
    docker:
      - image: circleci/node
    environment:
      TERM: xterm
    steps:
      - checkout
      - run:
          name: JS deps
          command: |
            npm install download
            npm install JSONPath
            npm install mktemp
      - run:
          name: Test buglist
          command: ./test/buglistTests.js

  build_ubuntu1810: &build_ubuntu1810
    docker:
      - image: trapni/solc-buildpack-deps:ubuntu1810
    environment:
      COVERAGE: "ON"
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *solc_artifact
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  # Builds in C++17 mode and uses debug build in order to speed up.
  # Do *NOT* store any artifacts or workspace as we don't run tests on this build.
  build_ubuntu1810_cxx17:
    <<: *build_ubuntu1810
    environment:
      CMAKE_OPTIONS: -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/cxx17.cmake -DUSE_CVC4=OFF -DCMAKE_BUILD_TYPE=Debug
    steps:
      - checkout
      - run: *run_build

  build_ubuntu1810_ossfuzz:
    <<: *build_ubuntu1810
    environment:
      TERM: xterm
      CC: /usr/bin/clang-7
      CXX: /usr/bin/clang++-7
      CMAKE_OPTIONS: -DOSSFUZZ=1 -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/libfuzzer.cmake
    steps:
      - checkout
      - run: *setup_prerelease_commit_hash
      - run: *run_build_ossfuzz
      - persist_to_workspace: *ossfuzz_artifacts

  build_archlinux:
    docker:
      - image: trapni/solc-buildpack-deps:archlinux
    environment:
      TERM: xterm
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *solc_artifact
      - persist_to_workspace:
          root: build
          paths:
            - solc/solc
            - test/soltest
            - test/tools/solfuzzer

  build_osx:
    macos:
      xcode: "10.0.0"
    environment:
      TERM: xterm
      CMAKE_OPTIONS: -DLLL=ON
    steps:
      - checkout
      - run:
          name: Install build dependencies
          command: |
            brew unlink python
            brew install z3
            brew install boost
            brew install cmake
            brew install wget
            ./scripts/install_obsolete_jsoncpp_1_7_4.sh
      - run: *run_build
      - store_artifacts: *solc_artifact
      - persist_to_workspace: *all_artifacts

  test_osx_cli:
    macos:
      xcode: "10.0.0"
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Install dependencies
          command: |
            brew unlink python
            brew install z3
      - run: *run_cmdline_tests
      - store_test_results:
          path: test_results/
      - store_artifacts:
          path: test_results/
          destination: test_results/

  build_emscripten:
    docker:
      - image: trzeci/emscripten:sdk-tag-1.38.22-64bit
    environment:
      TERM: xterm
    steps:
      - checkout
      - restore_cache:
          name: Restore Boost build
          key: &boost-cache-key emscripten-boost-{{ checksum "scripts/travis-emscripten/install_deps.sh" }}{{ checksum "scripts/build_emscripten.sh" }}{{ checksum "scripts/travis-emscripten/build_emscripten.sh" }}
      - run:
          name: Bootstrap Boost
          command: |
            scripts/travis-emscripten/install_deps.sh
      - run:
          name: Build
          command: |
            scripts/travis-emscripten/build_emscripten.sh
      - save_cache:
          name: Save Boost build
          key: *boost-cache-key
          paths:
            - boost_1_68_0
      - store_artifacts:
          path: emscripten_build/libsolc/soljson.js
          destination: soljson.js
      - run: mkdir -p workspace
      - run: cp emscripten_build/libsolc/soljson.js workspace/soljson.js
      - run: scripts/get_version.sh > workspace/version.txt
      - persist_to_workspace:
          root: workspace
          paths:
            - soljson.js
            - version.txt

  # x64 ASAN build, for testing for memory related bugs
  build_ubuntu1810_asan: &build_ubuntu1810_asan
    <<: *build_ubuntu1810
    environment:
      CMAKE_OPTIONS: -DSANITIZE=address -DCMAKE_BUILD_TYPE=Debug
    steps:
      - checkout
      - run: *run_build
      - store_artifacts: *solc_artifact
      - persist_to_workspace:
          root: build
          paths:
            - solc/solc
            - test/soltest
            - test/tools/solfuzzer

  build_docs:
    docker:
      - image: trapni/solc-buildpack-deps:ubuntu1810
    steps:
      - checkout
      - run: *setup_prerelease_commit_hash
      - run:
          name: Build documentation
          command: ./scripts/docs.sh
      - store_artifacts:
          path: docs/_build/html/
          destination: docs-html

  test_ubuntu1810_cli: &test_ubuntu1810_cli
    docker:
      - image: trapni/solc-buildpack-deps:ubuntu1810
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: *run_cmdline_tests
      - store_test_results:
          path: test_results/
      - store_artifacts:
          path: test_results/
          destination: test_results/

  test_ubuntu1810_asan_cli:
    <<: *test_ubuntu1810_cli

  test_ubuntu1810_asan_constantinople:
    <<: *test_asan
    environment:
      EVM: constantinople
      OPTIMIZE: 0

  test_ubuntu1810_homestead:
    <<: *test_ubuntu1810
    environment:
      EVM: homestead
      OPTIMIZE: 0

  test_ubuntu1810_homestead_opt:
    <<: *test_ubuntu1810
    environment:
      EVM: homestead
      OPTIMIZE: 1

  test_ubuntu1810_byzantium:
    <<: *test_ubuntu1810
    environment:
      EVM: byzantium
      OPTIMIZE: 0

  test_ubuntu1810_byzantium_opt:
    <<: *test_ubuntu1810
    environment:
      EVM: byzantium
      OPTIMIZE: 1

  test_ubuntu1810_constantinople:
    <<: *test_ubuntu1810
    environment:
      EVM: constantinople
      OPTIMIZE: 0

  test_ubuntu1810_constantinople_opt:
    <<: *test_ubuntu1810
    environment:
      EVM: constantinople
      OPTIMIZE: 1

  test_ubuntu1810_constantinople_opt_abiv2:
    <<: *test_ubuntu1810
    environment:
      EVM: constantinople
      OPTIMIZE: 1
      ABI_ENCODER_V2: 1

  test_ubuntu1810_petersburg:
    <<: *test_ubuntu1810
    environment:
      EVM: petersburg
      OPTIMIZE: 0

  test_ubuntu1810_petersburg_opt:
    <<: *test_ubuntu1810
    environment:
      EVM: petersburg
      OPTIMIZE: 1

  test_emscripten_solcjs:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Test solcjs
          command: |
            node --version
            npm --version
            test/solcjsTests.sh /tmp/workspace/soljson.js $(cat /tmp/workspace/version.txt)

  test_emscripten_external_gnosis:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External GnosisSafe tests
          command: |
            test/externalTests/gnosis.sh /tmp/workspace/soljson.js || test/externalTests/gnosis.sh /tmp/workspace/soljson.js

  test_emscripten_external_zeppelin:
    docker:
      - image: circleci/node:10
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: External Zeppelin tests
          command: |
            test/externalTests/zeppelin.sh /tmp/workspace/soljson.js || test/externalTests/zeppelin.sh /tmp/workspace/soljson.js

workflows:
  version: 2

  build_all:
    jobs:
      # basic checks
      - check_spelling: *workflow_trigger_on_tags
      - check_coding_style: *workflow_trigger_on_tags
      - check_buglist: *workflow_trigger_on_tags

      # OS/X build and tests
      - build_osx: *workflow_trigger_on_tags
      - test_osx_cli: *workflow_osx

      # Ubuntu 18.10 build and tests
      - build_ubuntu1810: *workflow_trigger_on_tags
      - test_ubuntu1810_cli: *workflow_ubuntu1810
      - test_ubuntu1810_homestead: *workflow_ubuntu1810
      - test_ubuntu1810_homestead_opt: *workflow_ubuntu1810
      - test_ubuntu1810_byzantium: *workflow_ubuntu1810
      - test_ubuntu1810_byzantium_opt: *workflow_ubuntu1810
      - test_ubuntu1810_constantinople: *workflow_ubuntu1810
      - test_ubuntu1810_constantinople_opt: *workflow_ubuntu1810
      - test_ubuntu1810_constantinople_opt_abiv2: *workflow_ubuntu1810
      - test_ubuntu1810_petersburg: *workflow_ubuntu1810
      - test_ubuntu1810_petersburg_opt: *workflow_ubuntu1810

      # ASan build and tests
      - build_ubuntu1810_asan: *workflow_trigger_on_tags
      - test_ubuntu1810_asan_constantinople: *workflow_ubuntu1810_asan
      - test_ubuntu1810_asan_cli: *workflow_ubuntu1810_asan

      # compilation tests against more modern C++ standards (C++17 onwards)
      - build_ubuntu1810_ossfuzz: *workflow_trigger_on_tags

      # build-only
      - build_docs: *workflow_trigger_on_tags
      - build_archlinux: *workflow_trigger_on_tags

      # OSSFUZZ
      - build_ubuntu1810_cxx17: *workflow_trigger_on_tags

      # Emscripten build and tests
      - build_emscripten: *workflow_trigger_on_tags
      - test_emscripten_solcjs: *workflow_emscripten
      - test_emscripten_external_gnosis: *workflow_emscripten
      - test_emscripten_external_zeppelin: *workflow_emscripten

  # nightly:
  #   triggers:
  #     - schedule:
  #         cron: "0 0 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - develop
  #   jobs:
  # TODO: test ossfuzz (is a nightly only)
